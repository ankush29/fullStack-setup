{"version":3,"sources":["config.js","components/CalendarHeader.js","components/WeekDays.js","components/DateCells.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["exports","data","months","0","1","2","3","4","5","6","7","8","9","10","11","week","CalendarHeader","state","yearList","prevYearRange","_this","map","item","setState","nextYearRange","getMonths","renderMonths","props","setDate","currentMonth","monthList","length","Object","keys","index","react_default","a","createElement","className","key","onClick","setMonth","month","year","getFullYear","Date","prevMonth","_this$props","getMonth","nextMonth","_this$props2","getYear","currentYear","years","i","push","concat","this","_this2","yearRangeLength","Fragment","_this3","headerType","setYear","React","Component","WeekDays","days","DateCells","selectedDate","onDateClick","day","history","search","location","decodeURI","split","monthStart","monthEnd","currentStartDay","getDay","currentEndDay","startDate","endDate","overFlowPrevDate","getDate","overFlowPrevMonth","overFlowPrevYear","overFlowNextDate","overFlowNextMonth","overFlowNextYear","rows","formattedDate","_loop","cloneDay","getTime","toDateString","value","Calendar","date","toConsumableArray","_this$state","CalendarHeader_CalendarHeader","WeekDays_WeekDays","DateCells_DateCells","App","response","post","responseToPost","callApi","_callee","body","regenerator_default","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","handleSubmit","_callee2","e","_context2","preventDefault","method","headers","Content-Type","JSON","stringify","phone","password","text","then","res","express","catch","err","console","log","id","BrowserRouter","Route","exact","path","component","onSubmit","type","onChange","target","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2f030187.chunk.js","sourcesContent":["exports.data = {\n  months: {\n    0: \"January\",\n    1: \"February\",\n    2: \"March\",\n    3: \"April\",\n    4: \"May\",\n    5: \"June\",\n    6: \"July\",\n    7: \"August\",\n    8: \"September\",\n    9: \"October\",\n    10: \"November\",\n    11: \"December\"\n  },\n  week: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n}\n","import React from \"react\";\nimport {data} from \"../../src/config\";\n\nexport default class CalendarHeader extends React.Component {\n\n  state = {\n    yearList: []\n  };\n\n  prevYearRange = () => {\n    let yearList = this.state.yearList.map((item) => item - 9)\n    this.setState({yearList})\n  }\n\n  setYear(year) {\n    const month = (this.props.currentMonth).getMonth();\n    let months = this.renderMonths();\n    this.props.setDate(new Date(year, month, 1), months)\n    this.setState({\n      yearList: []\n    })\n  }\n\n  nextYearRange = () => {\n    let yearList = this.state.yearList.map((item) => item + 9)\n    this.setState({yearList})\n  }\n\n\n  getMonths = () => {\n    let months = this.renderMonths();\n    this.props.setDate(this.props.currentMonth, months)\n    this.setState({\n      yearList: [],\n    })\n  }\n\n  renderMonths = () => {\n    if(!this.props.monthList.length) {\n      return Object.keys(data.months).map((item, index) => {\n        return (<div className=\"col\" key={index} onClick={() => {this.setMonth(item)}}>{data.months[item]}</div>)\n      })\n    }\n  }\n\n  setMonth = (month) => {\n    let year = (this.props.currentMonth).getFullYear();\n    this.props.setDate(new Date(year, month, 1), [])\n  }\n\n  headerType() {\n    const yearRangeLength = this.state.yearList.length\n    return(\n      <React.Fragment>\n        {this.state.yearList.length ? <div className=\"year-col\"> {this.state.yearList[0]+'-'+this.state.yearList[yearRangeLength-1]} </div> :\n          (<React.Fragment> <div className=\"col col-start\">\n            {this.props.monthList.length ? null : <div className=\"icon\" onClick={this.prevMonth}>\n              chevron_left\n            </div>}\n          </div>\n          <div className=\"col col-center\">\n            {this.props.monthList.length\n              ? <span onClick={() => {this.getYear()}}>\n                {(this.props.currentMonth).getFullYear()}\n              </span>\n              : <span onClick={() => {this.getMonths()}}>\n                {data.months[(this.props.currentMonth).getMonth()] + ' ' + (this.props.currentMonth).getFullYear()}\n              </span>\n            }\n          </div>\n          {this.props.monthList.length ? null : <div className=\"col col-end\">\n            <div className=\"icon\" onClick={this.nextMonth}>chevron_right</div>\n          </div>}</React.Fragment>)\n        }\n      </React.Fragment>\n    )\n  }\n\n  prevMonth = () => {\n    const { monthList, currentMonth } = this.props;\n    this.props.setDate(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1), monthList)\n  };\n\n  nextMonth = () => {\n    const { monthList, currentMonth } = this.props;\n    this.props.setDate(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1), monthList)\n  };\n\n  getYear = () => {\n    const { currentMonth } = this.props;\n    const currentYear = currentMonth.getFullYear();\n    let years = [];\n    if(!this.state.yearList.length) {\n      for(let i = currentYear-4; i <= currentYear+4; i++) {\n        years.push(i)\n      }\n    }\n    this.setState({\n      yearList: [...years],\n    })\n    this.props.setDate(currentMonth, [])\n  }\n\n  render() {\n    return (\n      <div className=\"header row flex-middle\">\n        {this.headerType()}\n        <div className=\"row month\">{this.props.monthList}</div>\n        { this.state.yearList.length ? <div className=\"row icon-parent \">\n          <div className=\"icon\" onClick={this.prevYearRange}>\n            chevron_left\n          </div>\n          {this.state.yearList.map((item, index) => {\n            return(\n              <div className=\"col\" key={index} onClick={() => {this.setYear(item)}}>\n                {item}\n              </div>\n            )\n          })}\n          <div className=\"icon right\" onClick={this.nextYearRange}>\n            chevron_right\n          </div>\n        </div> : null }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {data} from \"../../src/config\";\n\nexport default class WeekDays extends React.Component {\n  render() {\n    const days = [];\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {data.week[i]}\n        </div>\n      );\n    }\n    return(\n      <div className=\"days row\">{days}</div>\n    );\n  }\n};\n","import React from 'react';\n\nexport default class DateCells extends React.Component {\n  state = {\n    selectedDate: new Date(),\n  };\n\n  componentDidMount() {\n    if(this.props.location.search) {\n      const selectedDate = decodeURI(this.props.location.search.split('=')[1])\n      this.setState({\n        selectedDate: new Date(selectedDate)\n      })\n      this.props.setDate(new Date(selectedDate), []);\n    }\n  }\n\n  onDateClick = day => {\n    const { history } = this.props;\n    this.setState({\n      selectedDate: day\n    });\n    history.push({\n      search: `?date=${day}`\n    })\n  };\n\n  render() {\n    const { currentMonth } = this.props;\n    const { selectedDate } = this.state;\n    const monthStart = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n    const monthEnd = new Date(monthStart.getFullYear(), monthStart.getMonth() + 1, 0);\n    const currentStartDay = monthStart.getDay();\n    const currentEndDay = monthEnd.getDay();\n    let startDate = monthStart;\n    let endDate = monthEnd;\n    if(currentStartDay !== 0) {\n      const overFlowPrevDate = new Date(monthStart.getFullYear(), monthStart.getMonth(), 0).getDate() - currentStartDay + 1;\n      const overFlowPrevMonth = new Date(monthStart.getFullYear(), monthStart.getMonth(), 0).getMonth();\n      const overFlowPrevYear = new Date(monthStart.getFullYear(), monthStart.getMonth(), 0).getFullYear();\n      startDate = new Date(overFlowPrevYear, overFlowPrevMonth, overFlowPrevDate)\n    }\n    if(currentEndDay !== 6) {\n      const overFlowNextDate = new Date(monthEnd.getFullYear(), monthEnd.getMonth()+1, 1).getDate() + 6 - currentEndDay - 1;\n      const overFlowNextMonth = new Date(monthEnd.getFullYear(), monthEnd.getMonth()+1, 1).getMonth();\n      const overFlowNextYear = new Date(monthEnd.getFullYear(), monthEnd.getMonth()+1, 1).getFullYear();\n      endDate = new Date(overFlowNextYear, overFlowNextMonth, overFlowNextDate)\n    }\n    const rows = [];\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = day.getDate();\n        const cloneDay = new Date(day.getTime());\n        days.push(\n          <div\n            className={`col cell ${\n              day.getMonth() !== monthStart.getMonth()\n                ? \"disabled\"\n                : day.toDateString() ===  selectedDate.toDateString() ? \"selected\" : \"\"\n            }`}\n            key={day} value={cloneDay}\n            onClick={() => this.onDateClick(cloneDay)}\n          >\n            <span className=\"number\">{formattedDate}</span>\n          </div>\n        );\n        day.setDate(day.getDate() + 1)\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n};\n","import React from \"react\";\nimport CalendarHeader from \"./CalendarHeader.js\"\nimport WeekDays from \"./WeekDays.js\"\nimport DateCells from \"./DateCells.js\"\n\nexport default class Calendar extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    monthList: [],\n  };\n\n  setDate = (date, months) => {\n    this.setState({\n      currentMonth: date,\n      monthList: [...months]\n    })\n  }\n\n  render() {\n    const { monthList, currentMonth } = this.state;\n    return (\n      <div className=\"calendar\">\n        <CalendarHeader monthList={monthList} currentMonth={currentMonth} setDate={this.setDate}/>\n        <WeekDays />\n        <DateCells currentMonth={currentMonth} location={this.props.location} history={this.props.history} setDate={this.setDate}/>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Calendar from \"./components/Calendar\";\nimport './index.css';\nimport { BrowserRouter as Switch, Route } from \"react-router-dom\";\n\nclass App extends Component {\n\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n  };\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n  };\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('http://localhost:3030/v1/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        phone: this.state.post,\n        password: 'iamankush'\n      }),\n    });\n    const body = await response.text();\n    this.setState({ responseToPost: body });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div id=\"logo\">\n            <span className=\"icon\">date_range</span>\n            <span>\n              calendar\n            </span>\n          </div>\n        </header>\n        <main>\n          <Switch>\n            <Route exact path='/' component={Calendar} />\n          </Switch>\n       </main>\n       <p>{this.state.response}</p>\n        <form onSubmit={this.handleSubmit}>\n          <p>\n            <strong>Post to Server:</strong>\n          </p>\n          <input\n            type=\"text\"\n            value={this.state.post}\n            onChange={e => this.setState({ post: e.target.value })}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n        <p>{this.state.responseToPost}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}